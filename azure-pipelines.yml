trigger:
  - main

pool:
  vmImage: ubuntu-latest

variables:
  nvdAPIKey: "78b5081b-b36d-4988-b159-acbfa0dcbf38"
  mavenRootFolder: $(Pipeline.Workspace)/.m2/
  mavenCacheFolder: $(mavenRootFolder)repository
  dockerImageName: 'kafka-testbed'
  sonarqubeService: 'SonarQubeCloud'
  sonarqubeOrg: 'ltheobald'
  sonarqubeProjectKey: 'kafka-testbed'
  sonarqubeProjectName: 'Kafka Testbed'

stages:
  # Stage 1: Build & test
  - stage: BuildTest
    displayName: 'Build and Unit Test'
    jobs:
      - job: Build
        steps:
          - task: DockerInstaller@0
            displayName: Ensure Docker is installed
          - task: Cache@2
            displayName: 'Cache Maven dependencies'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: 'maven | "$(Agent.OS)"'
              path: $(mavenCacheFolder)

          - task: Maven@4
            displayName: 'Build & Unit Test'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'clean test'
              options: '-Dmaven.repo.local=$(mavenCacheFolder)'
              publishJUnitResults: true

  # Stage 2: Code Analysis
  - stage: CodeAnalysis
    displayName: 'Static Code Analysis'
    dependsOn: BuildTest
    jobs:
      - job: SonarQubeAnalysis
        steps:
          - task: Cache@2
            displayName: 'Reload Maven cache'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: 'maven | "$(Agent.OS)"'
              path: $(mavenCacheFolder)
          - task: SonarCloudPrepare@3
            displayName: 'SonarQube: Prepare'
            inputs:
              SonarQube: '$(sonarqubeService)'
              organization: '$(sonarqubeOrg)'
              scannerMode: 'other'
              extraProperties: |
                sonar.branch.name=main

          - task: Maven@4
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'verify sonar:sonar'
              options: >
                -DnvdApiKey=$(nvdAPIKey)
                -Dsonar.projectKey=$(sonarqubeProjectKey)
                -Dmaven.repo.local=$(mavenCacheFolder)
            displayName: 'Verify with Maven'

          - task: SonarCloudPublish@3
            displayName: 'SonarQube: Publish'
            inputs:
              pollingTimeoutSec: 300

  - stage: IntegrationTests
    displayName: Integration Tests
    dependsOn: BuildTest
    jobs:
      - job: IntegrationTest
        steps:
          - task: Cache@2
            displayName: 'Reload Maven cache'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: 'maven | "$(Agent.OS)"'
              path: $(mavenCacheFolder)
          - task: Maven@4
            displayName: 'Integration Tests'
            continueOnError: true # Expecting this one to fail!
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'integration-test'
              options: >
                -Dmaven.repo.local=$(mavenCacheFolder)

  # Stage 3: Docker Build & Scan
  - stage: Containerize
    displayName: 'Container Build and Scan'
    dependsOn: CodeAnalysis
    jobs:
      - job: Docker
        steps:
          - task: Cache@2
            displayName: 'Reload Maven cache'
            inputs:
              key: 'maven | "$(Agent.OS)" | **/pom.xml'
              restoreKeys: 'maven | "$(Agent.OS)"'
              path: $(mavenCacheFolder)
          - task: Maven@4
            displayName: 'Build OCI Image with Buildpacks'
            inputs:
              mavenPomFile: 'pom.xml'
              goals: 'spring-boot:build-image'
              options: >
                -Dspring-boot.build-image.imageName=$(dockerImageName):$(Build.BuildId)
                -Dmaven.repo.local=$(mavenCacheFolder)

          - task: Trivy@1
            displayName: 'Scan image for Vulnerabilities'
            continueOnError: true
            inputs:
              image: "$(dockerImageName):$(Build.BuildId)"
          
          - task: ECRPushImage@1
            inputs:
              awsCredentials: 'AWS Personal'
              regionName: 'eu-west-1'
              imageSource: 'imagename'
              sourceImageName: "$(dockerImageName):$(Build.BuildId)"
              repositoryName: 'kafka-testbed'
              removeDockerImage: true
